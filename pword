#!/bin/bash

PYTHON="python3" # Pode-se modificar esta variavel, se necessario
PROGRAM="pword.py" # Nao pode modificar esta variavel

# constants
readonly DEFAULT_MODE="c"
readonly DEFAULT_PARALLELIZATION=1
readonly VALID_MODES=("c" "l" "i")
readonly OPTIONS=":hm:p:w:"

# initializing variables with their default value
mode=$DEFAULT_MODE
parallelization=$DEFAULT_PARALLELIZATION
word=0

# checks whether the value given in -m is one of the valid modes
validate_mode() {
    for m in "${VALID_MODES[@]}"; do
        if [ "$1" == "$m" ]; then
            return 0
        fi
    done
    return 1
}

# checks whether the value given in -p is a positive integer number
validate_parallelization() {
    if [[ "$1" =~ ^[0-9]+$ && "$1" -gt 0 ]]; then
        return 0
    else
        return 1
    fi
}

while getopts $OPTIONS option; do
    case $option in
        h)
            printf "Example: pword -m c -p 1 -w exemplo f1.txt\n(Mode) -m [c|l|i]\n(Parallelization) -p\n(Word) -w\n"
            exit 1
            ;;
        m)
            mode=$OPTARG
            validate_mode "$mode"
            is_valid=$?
            if [ $is_valid -eq 1 ]; then
                echo "Invalid argument. (-$option $mode)"
                exit 1 
            fi
            ;;
        p)
            parallelization=$OPTARG
            validate_parallelization "$parallelization"
            is_valid=$?
            if [ $is_valid -eq 1 ]; then
                echo "Invalid argument. (-${option} ${parallelization})"
                exit 1
            fi
            ;;
        w)
            word=$OPTARG
            ;;
        :)
            echo "Option -${OPTARG} provided with no arguments."
            exit 1
            ;;
        ?)
            echo "Invalid option: -${OPTARG}."
            exit 1
            ;;
    esac
done

# points to the last argument given through the command line
# in this case, the file or files
shift $((OPTIND - 1))

files=("$@")

# no word was given
if [ "$word" == 0 ]; then
    echo "Option -w must be passed."
    exit 1
fi

# number of files less than 1 (no files were given)
if [ ${#files} -lt 1 ]; then
    echo "At least 1 filename should be provided"
    exit 1
fi

if test -a ${PROGRAM}; then
    args=("$mode" "$parallelization" "$word" "${files[@]}")
    ${PYTHON} ${PROGRAM} "${args[@]}"
else
    # shellcheck disable=SC1017
    echo "The file ${PROGRAM} does not exist."
    exit 1
fi